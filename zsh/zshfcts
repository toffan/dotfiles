# ###   COMPILER   #############################################################

Warnings() {
    cc="$1"; shift
    autoflags=("-Wall" "-Wextra" "-pedantic")
    flags=()
    for flag in "$@"; do
        if [[ "$flag" == "-Wosef" ]]; then
            autoflags=()
        else
            flags+=("$flag")
        fi
    done
    command "$cc" $autoflags $flags
}

clang++() {
    Warnings "clang++" "$@"
}

clang() {
    Warnings "clang" "$@"
}

g++() {
    Warnings "g++" "$@"
}

gcc() {
    Warnings "gcc" "$@"
}


# ###   CD MV MKDIR   ##########################################################

mkdircd() {
    dest="${@:$#}"
    mkdir -p "$@"
    cd "$dest"
}

mkdirmv() {
    dest="${@:$#}"
    mkdir -p "$dest"
    mv "$@"
}

mvcd() {
    dest="${@:$#}"
    mv "$@"
    if [[ -d "$dest" ]]; then
        cd "$dest"
    else
        cd "`dirname "$dest"`"
    fi
}

mkdirmvcd() {
    dest="${@:$#}"
    mkdir -p "$dest"
    mv "$@"
    if [[ -d "$dest" ]]; then
        cd "$dest"
    else
        cd "`dirname "$dest"`"
    fi
}


# ###   OTHER   ################################################################

warn() {
    1>&2 echo $@
}

cd() {
    builtin cd $@

    local current_gitdir="$(git rev-parse --git-dir 2>/dev/null)"
    if [[ -n "$current_gitdir" ]]; then
        # sanitize $current_gitdir
        if [[ "$current_gitdir" == ".git" ]]; then
            current_gitdir="${PWD}/.git"
        fi

        if [[ "$previous_gitdir" != "$current_gitdir" ]]; then
            local remote
            remote="$(git remote get-url origin 2>/dev/null)"
            if [[ "$?" == "0" ]]; then
                out="$(git fetch 2>&1)"
                if [[ "$?" == "0" ]] then
                    [[ -n "$out" ]] && warn "$out"
                else
                    warn "From: $remote -- cannot fetch origin"
                fi
            fi
            previous_gitdir="$current_gitdir"
        fi
    fi
}

confirm () {
    echo -n "${1} [y/N] "
    read -r response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

pacnew() {
    for file in "$@"; do
        file=${file%.pacnew}
        sudo vimdiff "${file}" "${file}.pacnew"
        confirm "Rotate '${file}'?" && {
            sudo mv "${file}" "${file}.pacold"
            sudo mv "${file}.pacnew" "${file}"
        }
    done
}

# Add color to man pages
man() {
    env LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# vim: set filetype=sh:
