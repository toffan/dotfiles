# ###   COMPILER   #############################################################

Warnings() {
    cc="$1"; shift
    autoflags=("-Wall" "-Wextra" "-pedantic")
    flags=()
    for flag in "$@"; do
        if [[ "$flag" == "-Wosef" ]]; then
            autoflags=()
        else
            flags+=("$flag")
        fi
    done
    command "$cc" $autoflags $flags
}

clang++() {
    Warnings "clang++" "$@"
}

clang() {
    Warnings "clang" "$@"
}

g++() {
    Warnings "g++" "$@"
}

gcc() {
    Warnings "gcc" "$@"
}


# ###   CD MV MKDIR   ##########################################################

mkdircd() {
    dest="${@:$#}"
    mkdir -p "$@"
    cd "$dest"
}

mkdirmv() {
    dest="${@:$#}"
    mkdir -p "$dest"
    mv "$@"
}

mvcd() {
    dest="${@:$#}"
    mv "$@"
    if [[ -d "$dest" ]]; then
        cd "$dest"
    else
        cd "`dirname "$dest"`"
    fi
}

mkdirmvcd() {
    dest="${@:$#}"
    mkdir -p "$dest"
    mv "$@"
    if [[ -d "$dest" ]]; then
        cd "$dest"
    else
        cd "`dirname "$dest"`"
    fi
}


# ###   OTHER   ################################################################

confirm () {
    echo -n "${1} [y/N] "
    read -r response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

pacnew() {
    for file in "$@"; do
        file=${file%.pacnew}
        sudo vimdiff "${file}" "${file}.pacnew"
        confirm "Rotate '${file}'?" && {
            sudo mv "${file}" "${file}.pacold"
            sudo mv "${file}.pacnew" "${file}"
        }
    done
}

dockip() {
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}
