" {{{ Vundle
    set nocompatible    " be iMproved, required
    filetype off        " required

    let g:HasVundle = !empty(glob(expand("~") . "/.vim/bundle/Vundle.vim/*"))
    if g:HasVundle
        set rtp+=~/.vim/bundle/Vundle.vim
        call vundle#begin()

        " Plugin 'gmarik/Vundle.vim'              " Manage plugins
        Plugin 'tpope/vim-sensible'             " Add multiple features
        Plugin 'dahu/vim-fanfingtastic'         " Enhance f & t searches
        Plugin 'danro/rename.vim'               " Enable file renaming

        Plugin 'SirVer/ultisnips'               " Use snippets
        Plugin 'scrooloose/syntastic'           " Compile and print errors on :w
        Plugin 'Valloric/YouCompleteMe'         " Complete C/C++
        Plugin 'javacomplete'                   " Complete Java
        Plugin 'tell-k/vim-autopep8'            " Clean python
        Plugin 'tpope/vim-commentary'           " Auto (de)comment
        Plugin 'tpope/vim-endwise'              " Auto end
        Plugin 'tpope/vim-eunuch'               " Misc shell enhancements
        Plugin 'tpope/vim-surround'             " Surround text with delimiters
        Plugin 'matze/vim-move'                 " Move blocs through code and indentation

        Plugin 'bling/vim-airline'              " Explicit status bar
        Plugin 'airblade/vim-gitgutter'         " Print git diff into vim
        Plugin 'Yggdroot/indentLine'            " Explicit indentation
        Plugin 'ntpeters/vim-better-whitespace' " Spot and remove bad whitespaces
        Plugin 'google/vim-searchindex'         " Print number of results in a search
        Plugin 'lfv89/vim-interestingwords'     " Highlight words
        Plugin 'will133/vim-dirdiff'            " Make the difference betweent wo folders
        Plugin 'AndrewRadev/splitjoin.vim'      " Switch between oneline and multiline code

        " Coloration
        Plugin 'ekalinin/Dockerfile.vim'        " Dockerfile
        Plugin 'rust-lang/rust.vim'             " Rust
        Plugin 'cespare/vim-toml'               " Toml
        Plugin 'vim-scripts/django.vim'         " Django

        call vundle#end()
    end
" }}}

" {{{ Languages
" For C++
    let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm_extra_conf.py'
    let g:syntastic_cpp_compiler_options='-std=c++14 -linclude'

    let g:syntastic_cpp_check_header=1
    let g:ycm_complete_in_comments=1
    let g:ycm_confirm_extra_conf=0
    set matchpairs+=<:>
    autocmd FileType c,cpp setlocal commentstring=//\ %s
    autocmd FileType c,cpp setlocal textwidth=0

    set path+=include

    nmap <C-K> :%pyf /usr/share/clang/clang-format.py<cr>
    vmap <C-K> :pyf /usr/share/clang/clang-format.py<cr>

" For Python
    let g:syntastic_python_checkers = ['flake8']
    let g:syntastic_python_flake8_post_args = '--ignore=E501'

" For Java
    autocmd FileType java setlocal textwidth=0
    autocmd Filetype java setlocal omnifunc=javacomplete#Complete
    set suffixes+=.class
    let g:syntastic_java_javac_config_file_enabled=1

" For LaTeX
    let g:syntastic_tex_checkers = ['chktek']
    let g:tex_conceal = ""

" For html and css
    autocmd Filetype htlm,css setlocal shiftwidth=2

" Spell checking and wrapping in some file types
    autocmd Filetype gitcommit set spell textwidth=72 nofoldenable colorcolumn=51,73
    autocmd Filetype mkd,markdown,liquid,tex,text set spell textwidth=80 shiftwidth=2
    autocmd FileType markdown let g:indentLine_setConceal=0

" For vimperatorrc
    autocmd BufNewFile,BufRead .vimperatorrc,vimperatorrc set filetype=vim

" For egg
    autocmd BufNewFile,BufRead *.egg set filetype=egg
    autocmd FileType egg setlocal commentstring=--\ %s

" For vhdl
    autocmd FileType vhdl setlocal commentstring=--\ %s

" For Shell
    let g:syntastic_sh_checkers = ['shellcheck']
" }}}

" {{{ Remap
" Change keymap for vim-move
    nmap <C-Up>   <Plug>MoveLineUp
    vmap <C-Up>   <Plug>MoveBlockUp
    nmap <C-Down> <Plug>MoveLineDown
    vmap <C-Down> <Plug>MoveBlockDown

" Don't exit visual mode...
    " when shifting.
    vnoremap < <gv
    vnoremap > >gv
    " when (in/de)creasing numbers
    vnoremap <C-A> <C-A>gv
    vnoremap <C-X> <C-X>gv

" Move up and down by visual lines not buffer lines.
    nnoremap <Up>   gk
    vnoremap <Up>   gk
    nnoremap <Down> gj
    vnoremap <Down> gj

" General remap
    let mapleader = ","
    nmap <S-Enter> O<Esc>
    nmap <CR> o<Esc>
    map Y y$
    cmap w!! SudoWrite

    map <leader>l :YcmCompleter GoToDefinition<CR>
    map <leader>L :YcmCompleter GoToDeclaration<CR>
    map <leader>m :YcmCompleter GoToReferences<CR>
" }}}

" Personal settings
    set shiftwidth=4            " number of spaces for a tab
    set tabstop=4               " number of spaces for a tab
    set expandtab               " use spaces, not tabs
    set autoindent              " auto indentation
    set number                  " number of the current line
    set foldmethod=marker       " fold on triple {
    set conceallevel=0          " Do not hide characters
    set gdefault
    set hlsearch

" Other stuff
    set nocompatible
    set noignorecase
    set showmode showcmd
    set ruler
    set report=0
    set undolevels=1000
    set backspace=indent,eol,start
    set sidescroll=1
    set wildchar=<Tab>
    set joinspaces
    set errorformat=%f:%l:\ %m
    set whichwrap=b,s,h,l,<,>,~,[,]
    filetype plugin indent on
    syntax on


" {{{ Cosmetic
" Coloration
    set t_Co=256
    colorscheme toffan

" 80th column rule
    set colorcolumn=81,91,101
    hi ColorColumn ctermbg=233

" Bad whitespaces eradication
    autocmd BufWritePre * StripWhitespace
" }}}
